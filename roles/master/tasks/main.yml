---
- set_fact:
    env_kc: '{{ proxy_env |default({}) | combine ({"KUBECONFIG" :"/etc/kubernetes/admin.conf"}) }}'
  tags:
  - always

#- name: Install packages required by rook (ceph) storage setup
#  package: name={{ item }} state={{ package_state | default ('latest') }}
#  when: rook is defined and rook.enabled
#  with_items:
#  - jq
#  - ceph-common

- name: Pull images on master
  command: /usr/bin/docker pull "{{ images_repo |default ('k8s.gcr.io') }}/{{ item }}:{{ kubeadm_master_config.kubernetesVersion | default ('latest') }}"
  with_items:
  - "kube-proxy-amd64"
  - "kube-controller-manager-amd64"
  - "kube-apiserver-amd64"
  - "kube-scheduler-amd64"
  tags:
  - prepull_images
  register: command_result
  changed_when: '"Image is up to date" not in command_result.stdout or "Already exists" not in command_result.stdout'
  when: pre_pull_k8s_images is defined and pre_pull_k8s_images and kubeadm_master_config.kubernetesVersion is defined
  #when: full_kube_reinstall is defined and full_kube_reinstall and kubeadm_master_config.kubernetesVersion is defined

- name: adding {{ inventory_hostname,inventory_hostname_short }} to the kubeadm_master_config.apiServerCertSANs
  set_fact:
    extended_cert_list: "{{ [inventory_hostname,inventory_hostname_short] | union (kubeadm_master_config.apiServerCertSANs | default([]) ) }}"
    #extended_cert_list: "{{ [inventory_hostname,inventory_hostname_short] | union (kubeadm_master_config.apiServerCertSANs | default([kubernetes]) ) }}"
  when: kubeadm_master_config is defined 

- name: merging {{ inventory_hostname,inventory_hostname_short }} to the kubeadm_master_config.apiServerCertSANs
  set_fact:
    kubeadm_master_config: "{{ kubeadm_master_config | combine ({ 'apiServerCertSANs' : extended_cert_list }, recursive=True) }}"
  when: extended_cert_list is defined and kubeadm_master_config is defined

- name: "This is the kubeadm_master_config to be used"
  debug: var=kubeadm_master_config #|to_nice_yaml
  changed_when: false

- name: Make sure /etc/kubernetes folder exists
  file: path=/etc/kubernetes/ state=directory mode=0755

- name: Writing kubeadm_master_config to /etc/kubernetes/kubeadm-master.conf
  copy: content="{{ kubeadm_master_config | to_nice_yaml }}" dest="/etc/kubernetes/kubeadm-master.conf" force=yes

- name: "Initialize cluster with --config /etc/kubernetes/kubeadm-master.conf"
  # Note: one cannot merge config from both config file anc cli. Only the config file will be used (when present)
#  environment: '{{env_kc}}'
  command: /usr/bin/kubeadm init {{ kubeadm_init_args | default(" ") }} --config /etc/kubernetes/kubeadm-master.conf
  register: kubeadm_init
  tags:
  - init

- name: kubeadm_init output
  debug: msg:"{{kubeadm_init.stdout_lines}}"

- name: kubeadm_init output var
  debug: var=kubeadm_init verbosity=4

- name: find the token of the newly created cluster
  command: bash -c '/usr/bin/kubeadm token list | tail -n 1| cut -f 1 -d" "'
  register: kubeadm_token
  when: kubeadm_master_config is not defined or kubeadm_master_config.token is not defined
  changed_when: false
  tags:
  - node  # it is required for the node to register

#- name: populate the token in the kubeadm_master_config
#  set_fact:
#    kubeadm_master_config: "{{ kubeadm_master_config |
#    combine ({ 'token' : kubeadm_master_config_token.stdout }) }}"
#  when: kubeadm_master_config.token is not defined

#This is required when proxy is used, and the inventory_hostname is defined with fqdn
#to ensure the connection to local server is not going via proxy (expecially when applying addons)
- replace:
    dest: '{{ item }}'
    regexp: '(\s+)(server: https:\/\/)[A-Za-z0-9\-\.]+:'
    replace: '\1\2{{ groups["master"][0] }}:'
    #backup: yes
  #when: proxy_env is defined ### and master is defined with fqdn in the inventory file (e.g. master.example.com)
  with_items:
  - /etc/kubernetes/admin.conf
  - /etc/kubernetes/kubelet.conf
  #- /etc/kubernetes/controller-manager.conf
  #- /etc/kubernetes/scheduler.conf
  tags:
  - init
  notify:
  - Restart kubelet

- lineinfile:
    dest: '{{ item }}'
    insertafter: "^    - --"
    line: "    - --cloud-config=/etc/kubernetes/cloud-config"
  when: kubeadm_master_config.cloudProvider is defined
  # starting 1.11 this is not required and it will also resolve to false as kubeadm_master_config.cloudProvider was moved under api extra args. 
  # we keep this section for now for backward compatibility. TO BE removed in the future
  # TODO
  with_items:
  - /etc/kubernetes/manifests/kube-apiserver.yaml
  - /etc/kubernetes/manifests/kube-controller-manager.yaml
  tags:
  - init
  notify:
  - Restart kubelet

- name: export KUBECONFIG in master's ~/.bash_profile
  lineinfile: 
    dest: ~/.bash_profile
    line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
    state: present
    create: yes
    regexp: '^export KUBECONFIG=.*'
  when: shell is undefined or shell == 'bash'

- name: Wait few seconds for images pulls and cluster services to start
  pause: seconds=3
  changed_when: false

- name: Forcing restart of services
  meta: flush_handlers

- name: Wait few seconds for images pulls and cluster services to start
  pause: seconds=10
  changed_when: false

- name: apply master_uncordon when cluster is one machine only
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: 'kubectl uncordon {{ inventory_hostname_short }} '
  when: groups['all'] | length == 1

- name: "sanity - wait for alls pod to be running (besides kube-dns/coredns which won't be ready yet as overlay network is not yet deployed, and workder nodes are not yet installed (on clusters with more than one machine))"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: "kubectl get --namespace kube-system pods --no-headers | grep -v -w 'Running' | grep -v 'kube-dns' | grep -v 'coredns' || true "
  register: command_result
  tags:
  - sanity
  until: command_result.stdout == ""
  retries: 20
  delay: 3
  changed_when: false

