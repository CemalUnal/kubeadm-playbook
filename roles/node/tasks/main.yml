---
- set_fact: kubeadm_token="{{ hostvars[groups['master'][0]]['kubeadm_token'].stdout_lines[0] }}"
  when: kubeadm_master_config.token is not defined
  tags:
  - node

- set_fact: kubeadm_token={{ kubeadm_master_config.token }}
  when: kubeadm_master_config.token is defined
  tags:
  - node

- name: token to be used is
  debug: var=kubeadm_token

- name: add api section to the kubeadm_master_config (if does not exist)
  set_fact:
    kubeadm_master_config: "{{  kubeadm_master_config | combine ( { 'api': kubeadm_master_config.api | default ({}) } ) }}"

- name: "Wait 300 seconds for master at {{ groups['master'][0] }}:{{ kubeadm_master_config.api.bindPort | default (6443) }} to become open"
  wait_for:
    port: "{{ kubeadm_master_config.api.bindPort | default (6443) }}"
    host: "{{ groups['master'][0] }}"
    delay: 1
    timeout: 300

- name: Join cluster using kubeadm join {{ groups['master'][0] }}:{{ kubeadm_master_config.api.bindPort | default (6443) }} --token {{ kubeadm_token }} {{ kubeadm_join_args | default(" ") }}
  command: /usr/bin/kubeadm join {{ groups['master'][0] }}:{{ kubeadm_master_config.api.bindPort | default (6443) }} --token {{ kubeadm_token }} {{ kubeadm_join_args | default(" ") }}
  tags:
  - init
  - node
#  args:
#  creates: /etc/kubernetes/kubelet.conf

- name: wait for /etc/kubernetes/kubelet.conf to be created
  wait_for: 
    path: /etc/kubernetes/kubelet.conf
    state: present
    timeout: 30
    delay: 3
  changed_when: false
  tags:
  - init
  - node

#This is required when proxy is used, and the inventory_hostname is defined with fqdn
#to ensure the connection to local server is not going via proxy (expecially when applying addons)
- name: replace master api server address to {{ groups["master"][0] }} in the /etc/kubernetes/kubelet.conf
  replace:
    dest: /etc/kubernetes/kubelet.conf
    regexp: '(\s+)(server: https:\/\/)[A-Za-z0-9\-\.]+:'
    replace: '\1\2{{ groups["master"][0] }}:'
    #backup: yes
  #when: proxy_env is defined and master is defined with fqdn in the inventory file (e.g. master.example.com)
  tags:
  - init
  - node
  notify:
  - Restart kubelet

### SANITY : At this stage it will not be "Ready", as there is no network deployed yet.
# - block:
#   # At this stage it will not be "Ready", as there is no network deployed yet.
#   - name: kubectl get nodes
#     shell: "kubectl get nodes --no-headers | grep {{ inventory_hostname }}"   # | grep -v -w 'Ready' || true "
#     register: command_result
#     until: command_result.stdout != ""
#     retries: 40
#     delay: 3
#     changed_when: false
    
#   - name: Get nodes
#     command: kubectl get nodes
#     register: command_result
#     changed_when: false

#   - name: Display nodes
#     debug:
#       var: command_result.stdout_lines
#     changed_when: false

#   - name: Check all nodes were registered
#     shell: "/usr/bin/test $(kubectl get nodes --no-headers | grep -ow Ready | wc -l) >= {{ groups['node'] | length + groups['master'] | length }}"
#     register: command_result
#     retries: 10
#     delay: 3
#     until: command_result | success
#     changed_when: false
 
#   environment:
#     KUBECONFIG: /etc/kubernetes/kubelet.conf
#   tags:
#   - node
#   - node_sanity

### 
- name: export KUBECONFIG in nodes' ~/.bash_profile
  lineinfile:
    dest: ~/.bash_profile
    line: "export KUBECONFIG=/etc/kubernetes/kubelet.conf"
    state: present
    create: yes
    regexp: '^export KUBECONFIG=.*'
  when: shell is undefined or shell == 'bash'
  tags:
  - node

